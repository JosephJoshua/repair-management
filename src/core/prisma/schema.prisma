generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  storeId      String       @id @default(cuid()) @map("store_id")
  name         String
  address      String
  phoneNumbers String[]     @map("phone_numbers")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  activatedAt  DateTime?    @map("activated_at")
  disabledAt   DateTime?    @map("disabled_at")
  technicians  Technician[]
  users        User[]

  @@map("stores")
}

model Technician {
  technicianId String    @id @default(cuid()) @map("technician_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  name         String
  storeId      String    @map("store_id")
  store        Store     @relation(fields: [storeId], references: [storeId])

  @@map("technicians")
}

// === next-auth models ===
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String?
  storeId       String    @map("store_id")
  store         Store     @relation(fields: [storeId], references: [storeId])
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
